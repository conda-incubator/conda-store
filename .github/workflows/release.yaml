name: "Release"

on:
  push:
    tags:
      - 'v*'

jobs:
  release-conda-store-server:
    name: 'PyPi Release conda-store-server'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: conda-store-server
    steps:
      - name: 'Checkout Infrastructure'
        uses: actions/checkout@main
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install twine
        run: |
          pip install twine build
      - name: Build and Distribute
        env:
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m build --sdist
          twine upload -u $PYPI_USERNAME -p $PYPI_PASSWORD dist/*

  release-conda-store:
    name: 'PyPi Release conda-store'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: conda-store
    steps:
      - name: 'Checkout Infrastructure'
        uses: actions/checkout@main
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install twine and jupyter-packaging
        run: |
          pip install twine build
      - name: Build and Distribute
        env:
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        shell: bash -l {0}
        run: |
          python -m build --sdist
          twine upload -u $PYPI_USERNAME -p $PYPI_PASSWORD dist/*

  docker:
    name: 'Build Docker Release Images'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        docker-image:
          - conda-store
          - conda-store-server
    steps:
      - name: 'Checkout Infrastructure'
        uses: actions/checkout@master

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Lint Dockerfiles
        uses: jbergstroem/hadolint-gh-action@v1
        with:
          dockerfile: ${{ matrix.docker-image }}/Dockerfile
          output_format: tty
          error_level: 0

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Meta
        id: meta
        uses: crazy-max/ghaction-docker-meta@v2
        with:
          images: |
            quansight/${{ matrix.docker-image }}
          tags: |
            type=ref,event=tag

      - name: Build docker
        uses: docker/build-push-action@v2
        with:
          context: "${{ matrix.docker-image }}"
          file: "${{ matrix.docker-image }}/Dockerfile"
          tags: |
            ${{ steps.meta.outputs.tags }}
          push: ${{ github.event_name != 'pull_request' }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-publish-helm-chart:
    name: Build and publish Helm chart
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Setup the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v3

      - name: Install chart publishing dependencies
        run: |
          pip install chartpress pyyaml
          pip list
          helm version

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Configure a git user
        run: |
          git config --global user.email "github-actions@example.local"
          git config --global user.name "GitHub Actions user"

      - name: Build and publish Helm chart with chartpress
        env:
          GITHUB_ACTOR: ""
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          PUBLISH_ARGS="--push --publish-chart \
                        --builder=docker-buildx \
                        --platform=linux/amd64 \
                        --platform=linux/arm64"

          # chartpress needs to run next to resources/helm/chartpress.yaml
          cd resources/helm/

          # chartpress use git to push to our Helm chart repository.
          # Ensure that the permissions to the Docker registry are
          # already configured.

          if [[ $GITHUB_REF != refs/tags/* ]]; then
              # Using --extra-message, we help readers of merged PRs to know what version
              # they need to bump to in order to make use of the PR.
              #
              # ref: https://github.com/jupyterhub/chartpress#usage
              #
              # NOTE: GitHub merge commits contain a PR reference like #123. `sed` is used
              #       to extract a PR reference like #123 or a commit hash reference like
              #       @123abcd.

              PR_OR_HASH=$(git log -1 --pretty=%h-%B | head -n1 | sed 's/^.*\(#[0-9]*\).*/\1/' | sed 's/^\([0-9a-f]*\)-.*/@\1/')
              LATEST_COMMIT_TITLE=$(git log -1 --pretty=%B | head -n1)
              EXTRA_MESSAGE="${GITHUB_REPOSITORY}${PR_OR_HASH} ${LATEST_COMMIT_TITLE}"

              chartpress $PUBLISH_ARGS --extra-message "${EXTRA_MESSAGE}"
          else
              # Setting a tag explicitly enforces a rebuild if this tag had already been
              # built and we wanted to override it.

              chartpress $PUBLISH_ARGS --tag "${GITHUB_REF:10}"
          fi
