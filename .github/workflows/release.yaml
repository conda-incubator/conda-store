name: "Build and upload PyPI package"

on:
  release:
    types: [published]
  push:
    tags: ["*"]
  workflow_dispatch:

env:
  FORCE_COLOR: "1" # Make tools pretty.

permissions:
  contents: read # This is required for actions/checkout
  attestations: write
  id-token: write # Needed for attestations

jobs:
  # Always build & verify package.
  build-package:
    name: "Build & verify package"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory:
          - "conda-store"
          - "conda-store-server"
    defaults:
      run:
        working-directory: ${{ matrix.directory }}
    steps:
      - name: "Checkout Repository üõé"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - run: echo "Running on ${{ matrix.directory }}"

      - name: "Build and check package - ${{ matrix.directory }} üì¶"
        uses: hynek/build-and-inspect-python-package@v2
        id: baipp
        with:
          path: ${{ matrix.directory }}
          upload-name-suffix: "-${{ matrix.directory }}"
          attest-build-provenance-github: "true"

      - run: echo Packages can be found at ${{ steps.baipp.outputs.dist }} and in artifact ${{ steps.baipp.outputs.artifact-name }}

  # Upload to Test PyPI on every commit on main
  release-test-pypi:
    name: "Publish in-dev to test.pypi.org"
    environment: release-test-pypi
    runs-on: ubuntu-latest
    needs: build-package
    if: github.repository_owner == 'conda-incubator' && github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      id-token: write # IMPORTANT: this permission is mandatory for trusted publishing
    strategy:
      matrix:
        directory:
          - "conda-store"
          - "conda-store-server"

    steps:
      - name: "Download build artefacts üì•"
        uses: actions/download-artifact@v4.1.7
        with:
          name: Packages-${{ matrix.directory }}
          path: dist

      - run: ls -lR dist/

      - name: "Upload package to Test PyPI"
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          print-hash: true
          verbose: true

  # Upload to PyPI on every tag/release
  release-pypi:
    name: "Publish released package to pypi.org"
    environment: release-pypi
    if:  github.repository_owner == 'conda-incubator' && github.event_name == 'release' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: build-package
    permissions:
      id-token: write # IMPORTANT: this permission is mandatory for trusted publishing
    strategy:
      matrix:
        directory:
          - "conda-store"
          - "conda-store-server"
    defaults:
      run:
        working-directory: ${{ matrix.directory }}

    steps:
      - name: "Download build artefacts üì•"
        uses: actions/download-artifact@v4.1.7
        with:
          name: Packages-${{ matrix.directory }}
          path: dist

      - name: "Upload to PyPI üöÄ"
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true
          verbose: true

  build_and_push_docker_image:
    name: "Build Docker Images üõ†"
    runs-on: ubuntu-latest
    needs: release-pypi
    permissions:
      id-token: write # IMPORTANT: this permission is mandatory for trusted publishing
    strategy:
      matrix:
        docker-image:
          - conda-store
          - conda-store-server
    steps:
      - name: "Checkout Repository üõé"
        uses: actions/checkout@v4

      - name: "Get project's default Python version üè∑Ô∏è"
        run: |
          echo "PYTHON_VERSION_DEFAULT=$(cat .python-version-default)" >> $GITHUB_ENV

      - name: "Copy .dockerignore"
        run: |
          cp .dockerignore ${{ matrix.docker-image }}/.dockerignore
        shell: bash

      - name: "Set up Docker Buildx üèó"
        uses: docker/setup-buildx-action@v3
        # Required for building multi-platform images. See
        # https://docs.docker.com/build/ci/github-actions/multi-platform/#build-and-load-multi-platform-images
        with:
          daemon-config: |
            {
              "debug": true,
              "features": {
                "containerd-snapshotter": true
              }
            }

      - name: "Login to Docker Hub üê≥"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: "Login to quay.io üê≥"
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: "Add Docker metadata üìù"
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            quansight/${{ matrix.docker-image }}
            quay.io/quansight/${{ matrix.docker-image }}
          tags: |
            type=ref,event=tag
            type=ref,event=branch
            type=sha

      - name: "Publish Docker image üöÄ"
        uses: docker/build-push-action@v5
        with:
          context: "${{ matrix.docker-image }}"
          target: "prod"
          file: "${{ matrix.docker-image }}/Dockerfile"
          build-args: |
            RELEASE_VERSION=${{github.ref_name}}
            python_version=${{ env.PYTHON_VERSION_DEFAULT }}
          tags: |
            ${{ steps.meta.outputs.tags }}
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
        if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags/')
