# Copyright (c) conda-store development team. All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.
[build-system]
# https://github.com/ofek/hatch-vcs
requires = ["hatchling>=1.14.0", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "conda-store-server"
description = "Conda Environment Management, Builds, and Serve"
readme = "README.md"
license = "BSD-3-Clause"
requires-python = ">=3.10,<3.13"
keywords = ["conda"]
authors = [
  { name = "Christopher Ostrouchov", email = "chris.ostrouchov@gmail.com" },
]
maintainers = [
  { name = "Tania Allard", email = "trallard@bitsandchips.me" },
  { name = "Pavithra Eswaramoorthy", email = "pavithraes@outlook.com" },
  { name = "Peyton Murray", email = "peynmurray@gmail.com" },
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Build Tools",
  "License :: OSI Approved :: BSD License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3 :: Only",
  "Intended Audience :: Developers",
  "Intended Audience :: Information Technology",
  "Intended Audience :: Science/Research",
  "Intended Audience :: System Administrators",
]
dependencies = [
  # env builds
  # conda (which cannot be installed via pip see https://github.com/conda/conda/issues/11715)
  # constructor also not pip installable
  "python-docker",
  # we need platform dependent dependencies here
  "conda-docker; sys_platform == 'linux'",
  "conda-lock >=1.0.5",
  "conda-pack",
  "conda-package-handling",
  "conda-package-streaming",
  # web server
  "alembic",
  "celery",
  "fastapi",
  "filelock",
  "flower",
  "itsdangerous",
  "jinja2",
  "pyjwt",
  "psycopg2-binary",
  "pymysql",
  # pyyaml>5.3.1,<6.0.1 is broken with cython>=3 transitive dependency
  # See https://github.com/yaml/pyyaml/issues/724 for details
  "pyyaml >=6.0.1",
  "redis",
  "requests",
  "pydantic >=2.0",
  "python-multipart",
  # setuptools>=70 uses local version of packaging (and other deps) without
  # pinning them; conda-lock depends on this, but also doesn't pin the setuptools
  # version. See https://github.com/pypa/setuptools/issues/4478 for details
  "setuptools<70",
  "sqlalchemy>=2.0,<2.1",
  "traitlets",
  "uvicorn",
  "yarl",
  # artifact storage
  "minio",
  "platformdirs >=4.0,<5.0a0"
]
dynamic = ["version"]

[project.urls]
Homepage = "https://conda.store/"
Source = "https://github.com/conda-incubator/conda-store"
Issues = "https://github.com/conda-incubator/conda-store/issues"

[tool.hatch.version]
path = "conda_store_server/__init__.py"

[tool.hatch.envs.dev]
dependencies = [
  "aiohttp>=3.8.1",
  "build",
  "docker-compose",
  "docker-py<7",
  "pre-commit",
  "pytest",
  "pytest-celery",
  "pytest-playwright",
  "twine>=5.0.0",
  "pkginfo>=1.10", # Needed to support metadata 2.3
  "pytest-cov",
]

[tool.hatch.envs.lint]
dependencies = ["pre-commit"]

[tool.hatch.envs.lint.scripts]
lint = ["pre-commit run --all"]
unit-test = "pytest -m 'not extended_prefix and not user_journey' tests"
playwright-test = [
  "playwright install",
  "pytest --video on ../tests/test_playwright.py"
]
integration-test = ["pytest ../tests/test_api.py ../tests/test_metrics.py"]
user-journey-test = ["pytest -m user_journey"]

# custom conda-store build hook, used to bundle ui artefacts
[tool.hatch.build.hooks.custom]

[tool.hatch.build.targets.sdist.hooks.custom]

[project.scripts]
conda-store-server = "conda_store_server._internal.server.__main__:main"
conda-store-worker = "conda_store_server._internal.worker.__main__:main"

[tool.black]
line-length = 88

[tool.isort]
lines_between_types = 1
lines_after_imports = 2
profile = 'black'

[tool.ruff]
line-length = 88
exclude = [
    "conda_store_server/_internal/alembic/versions/"
]

[tool.ruff.lint]
ignore = [
    "E501", # line-length

    "ANN001",	# missing-type-function-argument
    "ANN002",	# missing-type-args
    "ANN003",	# missing-type-kwargs
    "ANN101",	# missing-type-self
    "ANN102",	# missing-type-cls
    "ANN201",	# missing-return-type-undocumented-public-function
    "ANN202",	# missing-return-type-private-function
    "ANN204",	# missing-return-type-special-method
    "ANN205",	# missing-return-type-static-method
    "ANN206",	# missing-return-type-class-method
    "ARG001",	# unused-function-argument
    "ARG002",	# unused-method-argument
    "B006",  	# mutable-argument-default
    "B007",  	# unused-loop-control-variable
    "B008",  	# function-call-in-default-argument
    "B011",  	# assert-false
    "B015",  	# useless-comparison
    "B017",  	# assert-raises-exception
    "B018",  	# useless-expression
    "B028",  	# no-explicit-stacklevel
    "B904",  	# raise-without-from-inside-except
    "D100",  	# undocumented-public-module
    "D101",  	# undocumented-public-class
    "D102",  	# undocumented-public-method
    "D103",  	# undocumented-public-function
    "D104",  	# undocumented-public-package
    "D200",  	# fits-on-one-line
    "D205",  	# blank-line-after-summary
    "D400",  	# ends-in-period
    "D401",  	# non-imperative-mood
    "D404",  	# docstring-starts-with-this
    "ERA001",	# commented-out-code
    "FIX001",	# line-contains-fixme
    "FIX002",	# line-contains-todo
    "N805",  	# invalid-first-argument-name-for-method
    "N815",  	# mixed-case-variable-in-class-scope
    "PT004", 	# pytest-missing-fixture-name-underscore
    "PT006", 	# pytest-parametrize-names-wrong-type
    "PT011", 	# pytest-raises-too-broad
    "PT012", 	# pytest-raises-with-multiple-statements
    "PT014", 	# pytest-duplicate-parametrize-test-cases
    "PT015", 	# pytest-assert-always-false
    "RET503",	# implicit-return
    "RET504",	# unnecessary-assign
    "RET505",	# superfluous-else-return
    "RET506",	# superfluous-else-raise
    "SIM105",	# suppressible-exception
    "SIM115",	# open-file-with-context-handler
    "SIM117",	# multiple-with-statements
    "UP006", 	# non-pep585-annotation
    "UP007", 	# non-pep604-annotation
    "UP030", 	# format-literals
    "UP031", 	# printf-string-formatting
    "UP035", 	# deprecated-import
    "UP038", 	# non-pep604-isinstance
]
select = [
    "E",   # pycodestyle
    "W",   # pycodestyle
    "F",   # Pyflakes
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "SIM", # flake8-simplify
    "I",   # isort
    "N",   # pep8 naming
    "D",   # pydocstyle
    "ANN", # annotations
    "T10", # debugger
    "PT",  # flake8-pytest
    "RET", # flake8-return
    "ARG", # flake8-unused-arguments
    "FIX", # flake8-fixme
    "ERA", # flake8-eradicate
    "PD",  # pandas-vet
    "NPY", # numpy-specific rules
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.check-wheel-contents]
# ignore alembic migrations https://github.com/jwodder/check-wheel-contents?tab=readme-ov-file#w004--module-is-not-located-at-importable-path
# ignore empty files w/license header
ignore = ["W004", "W002"]

[tool.pytest.ini_options]
markers = [
  "playwright: mark a test as a playwright test",
  "integration: mark a test as an integration test",
  "user_journey: mark a test as a user journey test",
  "extended_prefix: mark a test as for windows extended_prefix",
  "long_running_test: mark a test that takes a long time to run",
]
