# Copyright (c) conda-store development team. All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

"""add user table

Revision ID: 6ebda11d1c42
Revises: bf065abf375b
Create Date: 2024-11-10 00:13:08.157178

"""

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "6ebda11d1c42"
down_revision = "bf065abf375b"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.Unicode(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "userpermission",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("environment_id", sa.Integer(), nullable=True),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column(
            "role",
            sa.Enum("NONE", "VIEWER", "EDITOR", "ADMIN", name="role"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["environment_id"],
            ["environment.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.alter_column(
        "build",
        "status",
        existing_type=sa.VARCHAR(length=9),
        type_=sa.Enum(
            "QUEUED", "BUILDING", "COMPLETED", "FAILED", "CANCELED", name="buildstatus"
        ),
        existing_nullable=True,
    )
    op.alter_column(
        "build_artifact",
        "artifact_type",
        existing_type=sa.VARCHAR(length=21),
        type_=sa.Enum(
            "DIRECTORY",
            "LOCKFILE",
            "LOGS",
            "YAML",
            "CONDA_PACK",
            "DOCKER_BLOB",
            "DOCKER_MANIFEST",
            "CONTAINER_REGISTRY",
            "CONSTRUCTOR_INSTALLER",
            name="buildartifacttype",
        ),
        existing_nullable=False,
    )
    op.alter_column(
        "keyvaluestore", "prefix", existing_type=sa.VARCHAR(), nullable=True
    )
    op.alter_column("keyvaluestore", "key", existing_type=sa.VARCHAR(), nullable=True)
    op.drop_index("ix_keyvaluestore_prefix", table_name="keyvaluestore")
    op.create_unique_constraint("_prefix_key_uc", "keyvaluestore", ["prefix", "key"])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("_prefix_key_uc", "keyvaluestore", type_="unique")
    op.create_index(
        "ix_keyvaluestore_prefix", "keyvaluestore", ["prefix"], unique=False
    )
    op.alter_column("keyvaluestore", "key", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column(
        "keyvaluestore", "prefix", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "build_artifact",
        "artifact_type",
        existing_type=sa.Enum(
            "DIRECTORY",
            "LOCKFILE",
            "LOGS",
            "YAML",
            "CONDA_PACK",
            "DOCKER_BLOB",
            "DOCKER_MANIFEST",
            "CONTAINER_REGISTRY",
            "CONSTRUCTOR_INSTALLER",
            name="buildartifacttype",
        ),
        type_=sa.VARCHAR(length=21),
        existing_nullable=False,
    )
    op.alter_column(
        "build",
        "status",
        existing_type=sa.Enum(
            "QUEUED", "BUILDING", "COMPLETED", "FAILED", "CANCELED", name="buildstatus"
        ),
        type_=sa.VARCHAR(length=9),
        existing_nullable=True,
    )
    op.drop_table("userpermission")
    op.drop_table("user")
    # ### end Alembic commands ###
