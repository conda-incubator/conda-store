"""split conda_package into conda_package and conda_package_build

Revision ID: 16f65805dc8f
Revises: 5ad723de2abd
Create Date: 2022-08-24 12:01:48.461989

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "16f65805dc8f"
down_revision = "5ad723de2abd"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "conda_package_build",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("package_id", sa.Integer(), nullable=True),
        sa.Column("build", sa.Unicode(length=64), nullable=False),
        sa.Column("build_number", sa.Integer(), nullable=False),
        sa.Column("constrains", sa.JSON(), nullable=True),
        sa.Column("depends", sa.JSON(), nullable=False),
        sa.Column("md5", sa.Unicode(length=255), nullable=False),
        sa.Column("sha256", sa.Unicode(length=64), nullable=False),
        sa.Column("size", sa.BigInteger(), nullable=False),
        sa.Column("subdir", sa.Unicode(length=64), nullable=True),
        sa.Column("timestamp", sa.BigInteger(), nullable=True),
        sa.ForeignKeyConstraint(
            ["package_id"],
            ["conda_package.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "package_id",
            "subdir",
            "build",
            "build_number",
            "sha256",
            name="_conda_package_build_uc",
        ),
    )
    op.create_index(
        op.f("ix_conda_package_build_build"),
        "conda_package_build",
        ["build"],
        unique=False,
    )
    op.create_table(
        "build_conda_package_build",
        sa.Column("build_id", sa.Integer(), nullable=False),
        sa.Column("conda_package_build_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["build_id"], ["build.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["conda_package_build_id"], ["conda_package_build.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("build_id", "conda_package_build_id"),
    )
    op.create_table(
        "solve_conda_package_build",
        sa.Column("solve_id", sa.Integer(), nullable=False),
        sa.Column("conda_package_build_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["conda_package_build_id"], ["conda_package_build.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["solve_id"], ["solve.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("solve_id", "conda_package_build_id"),
    )

    # Add Foreign Key channel_id on conda_package_build
    op.add_column(
        "conda_package_build", sa.Column("channel_id", sa.Integer(), nullable=True)
    )
    op.drop_constraint("_conda_package_build_uc", "conda_package_build", type_="unique")
    op.create_unique_constraint(
        "_conda_package_build_uc",
        "conda_package_build",
        ["channel_id", "package_id", "subdir", "build", "build_number", "sha256"],
    )
    op.create_foreign_key(
        None, "conda_package_build", "conda_channel", ["channel_id"], ["id"]
    )

    # migrate here before drop

    conn = op.get_bind()
    # Step 1 : populate conda_package_build with the data from conda_package
    conn.execute(
        """
                INSERT INTO conda_package_build (md5, constrains, sha256, build_number, timestamp, size, build, subdir, depends, package_id, channel_id)
                SELECT md5, constrains, sha256, build_number, timestamp, size, build, subdir, depends, id, channel_id 
                FROM conda_package;
            """
    )

    # Step 2 : migrate the packages of builds, to point to conda_package_build data
    # instead of conda_package
    conn.execute(
        """
                INSERT INTO build_conda_package_build (build_id, conda_package_build_id) 
                SELECT bcp.build_id, cpb.id
                FROM build_conda_package bcp
                LEFT JOIN conda_package cp ON bcp.conda_package_id = cp.id 
                LEFT JOIN conda_package_build cpb ON cp.sha256 = cpb.sha256 AND cp.channel_id = cpb.channel_id;
            """
    )

    # Step 3 : same logic with the solves
    conn.execute(
        """
                INSERT INTO solve_conda_package_build (solve_id, conda_package_build_id) 
                SELECT scp.solve_id, cpb.id
                FROM solve_conda_package scp
                LEFT JOIN conda_package cp ON scp.conda_package_id = cp.id 
                LEFT JOIN conda_package_build cpb ON cp.sha256 = cpb.sha256 AND cp.channel_id = cpb.channel_id;
            """
    )

    op.drop_table("solve_conda_package")
    op.drop_table("build_conda_package")

    op.create_foreign_key(None, "build", "specification", ["specification_id"], ["id"])
    op.create_foreign_key(None, "build", "environment", ["environment_id"], ["id"])
    op.create_foreign_key(None, "build_artifact", "build", ["build_id"], ["id"])
    op.create_unique_constraint(
        "_conda_package_uc", "conda_package", ["channel_id", "name", "version"]
    )
    op.create_index(
        op.f("ix_conda_package_channel_id"),
        "conda_package",
        ["channel_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_conda_package_name"), "conda_package", ["name"], unique=False
    )
    op.create_index(
        op.f("ix_conda_package_version"), "conda_package", ["version"], unique=False
    )
    op.create_foreign_key(
        None, "conda_package", "conda_channel", ["channel_id"], ["id"]
    )
    op.drop_column("conda_package", "build")
    op.drop_column("conda_package", "subdir")
    op.drop_column("conda_package", "sha256")
    op.drop_column("conda_package", "timestamp")
    op.drop_column("conda_package", "size")
    op.drop_column("conda_package", "depends")
    op.drop_column("conda_package", "md5")
    op.drop_column("conda_package", "constrains")
    op.drop_column("conda_package", "build_number")

    op.create_unique_constraint(
        "_namespace_name_uc", "environment", ["namespace_id", "name"]
    )
    op.create_foreign_key(None, "environment", "namespace", ["namespace_id"], ["id"])
    op.create_foreign_key(None, "environment", "build", ["current_build_id"], ["id"])
    op.create_foreign_key(None, "solve", "specification", ["specification_id"], ["id"])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "solve", type_="foreignkey")
    op.drop_constraint(None, "environment", type_="foreignkey")
    op.drop_constraint(None, "environment", type_="foreignkey")
    op.drop_constraint("_namespace_name_uc", "environment", type_="unique")
    op.add_column(
        "conda_package",
        sa.Column("build_number", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "conda_package",
        sa.Column(
            "constrains",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "conda_package",
        sa.Column("md5", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    )
    op.add_column(
        "conda_package",
        sa.Column(
            "depends",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "conda_package",
        sa.Column("size", sa.BIGINT(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "conda_package",
        sa.Column("timestamp", sa.BIGINT(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "conda_package",
        sa.Column("sha256", sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    )
    op.add_column(
        "conda_package",
        sa.Column("subdir", sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    )
    op.add_column(
        "conda_package",
        sa.Column("build", sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "conda_package", type_="foreignkey")
    op.drop_index(op.f("ix_conda_package_version"), table_name="conda_package")
    op.drop_index(op.f("ix_conda_package_name"), table_name="conda_package")
    op.drop_index(op.f("ix_conda_package_channel_id"), table_name="conda_package")
    op.drop_constraint("_conda_package_uc", "conda_package", type_="unique")
    op.drop_constraint(None, "build_artifact", type_="foreignkey")
    op.drop_constraint(None, "build", type_="foreignkey")
    op.drop_constraint(None, "build", type_="foreignkey")
    op.create_table(
        "build_conda_package",
        sa.Column("build_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "conda_package_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint(
            "build_id", "conda_package_id", name="build_conda_package_pkey"
        ),
    )
    op.create_table(
        "solve_conda_package",
        sa.Column("solve_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "conda_package_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint(
            "solve_id", "conda_package_id", name="solve_conda_package_pkey"
        ),
    )

    # TODO : migrate data backwards here

    op.drop_table("solve_conda_package_build")
    op.drop_table("build_conda_package_build")
    op.drop_index(
        op.f("ix_conda_package_build_build"), table_name="conda_package_build"
    )
    op.drop_table("conda_package_build")
    # ### end Alembic commands ###
